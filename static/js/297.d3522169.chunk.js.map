{"version":3,"file":"static/js/297.d3522169.chunk.js","mappings":"2MAGaA,EAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACfC,GAAWC,EAAAA,EAAAA,MAGjB,OADAC,QAAQC,IAAIJ,IAEV,4BACE,mBAEA,wBACGA,EAAOK,KAAI,SAAAC,GAAI,OACd,yBAEE,SAAC,KAAD,CACEC,GAAE,kBAAaD,EAAKE,GAAGC,YACvBC,MAAO,CAAEC,KAAMV,GAFjB,SAIGK,EAAKM,SANDN,EAAKE,GADA,QAcvB,C,kGCxBYK,EAAmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,kBAAMC,QANa,SAAAC,GACnBA,EAAMC,iBACNN,EAASE,EACV,EAGC,WACE,kBACEK,KAAK,OACLL,MAAOA,EACPM,SAde,SAAAH,GACnBF,EAASE,EAAMI,OAAOP,MACvB,EAaKQ,YAAY,qBAEd,mBAAQH,KAAK,SAAb,sBAGL,E,0BCOD,EA1Be,WACb,OAA0DN,EAAAA,EAAAA,UAAS,IAAnE,eAAOU,EAAP,KAA8BC,EAA9B,KACA,GAA0BC,EAAAA,EAAAA,MAA1B,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQH,EAAMI,IAAI,SACnBD,IACLE,EAAAA,EAAAA,IAAqBF,GAAOG,MAAK,SAAAC,GAAI,OAAIT,EAAyBS,EAA7B,GACtC,GAAE,CAACP,IAMJ,OACE,iCACE,0BACE,qBAEF,SAACf,EAAD,CAAkBC,SATD,SAAAiB,GACnBF,EAAS,CAAEE,MAAOA,GACnB,KASG,SAAChC,EAAA,EAAD,CAAMC,OAAQyB,MAGnB,C,+LC5BKW,EAAU,mCAGHC,EAAmB,mCAAG,+GAERC,EAAAA,EAAAA,IAAA,kEACsCF,IAH9B,uBAEvBD,EAFuB,EAEvBA,KAFuB,kBAKxBA,EAAKI,SALmB,gCAO/BpC,QAAQC,IAAR,MAP+B,yDAAH,qDAYnBoC,EAAe,mCAAG,WAAMhC,GAAN,kGAEJ8B,EAAAA,EAAAA,IAAA,6CACiB9B,EADjB,oBAC+B4B,IAH3B,uBAEnBD,EAFmB,EAEnBA,KAFmB,kBAKpBA,GALoB,gCAO3BhC,QAAQC,IAAR,MAP2B,yDAAH,sDAYf6B,EAAoB,mCAAG,WAAMF,GAAN,kGAETO,EAAAA,EAAAA,IAAA,0DAC8BP,EAD9B,oBAC+CK,EAD/C,+CAFS,uBAExBD,EAFwB,EAExBA,KAFwB,kBAKzBA,EAAKI,SALoB,gCAOhCpC,QAAQC,IAAR,MAPgC,yDAAH,sDAYpBqC,EAAc,mCAAG,WAAMjC,GAAN,kGAEH8B,EAAAA,EAAAA,IAAA,6CACiB9B,EADjB,4BACuC4B,IAHpC,uBAElBD,EAFkB,EAElBA,KAFkB,kBAKnBA,GALmB,gCAO1BhC,QAAQC,IAAR,MAP0B,yDAAH,sDAYdsC,EAAgB,mCAAG,WAAMlC,GAAN,kGAEL8B,EAAAA,EAAAA,IAAA,6CACiB9B,EADjB,4BACuC4B,IAHlC,uBAEpBD,EAFoB,EAEpBA,KAFoB,kBAKrBA,GALqB,gCAO5BhC,QAAQC,IAAR,MAP4B,yDAAH,qD","sources":["components/List.jsx","components/FormSearchMovies/FormSearchMovies.jsx","pages/Movies/Movies.jsx","services/api/api.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const List = ({ movies }) => {\n  const location = useLocation();\n\n  console.log(movies);\n  return (\n    <div>\n      <br></br>\n\n      <ul>\n        {movies.map(item => (\n          <li key={item.id}>\n            {/* Надо чтоб значение в to={} было строка. Если придет число (например айдишник как тут), то работать не будет. Поэтому надо сделать интерполяцю через шаблонную строчку и привести в любом случае к строке */}\n            <Link\n              to={`/movies/${item.id.toString()}`}\n              state={{ from: location }}\n            >\n              {item.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nexport const FormSearchMovies = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(value);\n  };\n\n  return (\n    <form onClick={handleSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        placeholder=\"enter a request\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n","import { FormSearchMovies } from 'components/FormSearchMovies/FormSearchMovies';\nimport { List } from 'components/List';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByKeyword } from 'services/api/api';\n\nconst Movies = () => {\n  const [searchMoviesByKeyword, setSearchMoviesByKeyword] = useState([]);\n  const [param, setParam] = useSearchParams();\n\n  useEffect(() => {\n    const query = param.get('query');\n    if (!query) return;\n    fetchMoviesByKeyword(query).then(data => setSearchMoviesByKeyword(data));\n  }, [param]);\n\n  const handleSubmit = query => {\n    setParam({ query: query });\n  };\n\n  return (\n    <>\n      <div>\n        <br></br>\n      </div>\n      <FormSearchMovies onSubmit={handleSubmit} />\n\n      <List movies={searchMoviesByKeyword} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '3969575b7b3cc6462971102333f767aa';\n\n//список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport const fetchTrendingMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//запрос полной информации о фильме для страницы кинофильма.\nexport const fetchMoviesByID = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//поиск кинофильма по ключевому слову на странице фильмов.\nexport const fetchMoviesByKeyword = async query => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}&include_adult=false&language=en-US&page=1`\n    );\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//информация об актерском составе\nexport const fetchMovieCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//информация об отзывах о фильме\nexport const fetchMovieReview = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["List","movies","location","useLocation","console","log","map","item","to","id","toString","state","from","title","FormSearchMovies","onSubmit","useState","value","setValue","onClick","event","preventDefault","type","onChange","target","placeholder","searchMoviesByKeyword","setSearchMoviesByKeyword","useSearchParams","param","setParam","useEffect","query","get","fetchMoviesByKeyword","then","data","API_KEY","fetchTrendingMovies","axios","results","fetchMoviesByID","fetchMovieCast","fetchMovieReview"],"sourceRoot":""}